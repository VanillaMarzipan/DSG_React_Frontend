/// <reference types="cypress" />
import elements from '../../support/pageElements'
import searchResultsResponse from '../../fixtures/productLookup/searchResultsResponse.json'
import detailsResponse from '../../fixtures/productLookup/detailsResponse.json'
import pfpDetailsResponse from '../../fixtures/productLookup/pfpDetailsResponse.json'
import pricingResponse from '../../fixtures/productLookup/pricingResponse.json'
import pfpPricingResponse from '../../fixtures/productLookup/pfpPricingResponse.json'
import omniSearchResponse from '../../fixtures/productLookup/omniSearchResponse.json'
import serviceOmniSearchResponse from '../../fixtures/productLookup/serviceOmniSearchResponse.json'
import zeroResultsResponse from '../../fixtures/productLookup/zeroResultsResponse.json'
import oneResultPageResponse from '../../fixtures/productLookup/oneResultPageResponse.json'
import details404 from '../../fixtures/productLookup/details404.json'
import detailsResponseInStock from '../../fixtures/productLookup/detailsResponseInStock.json' 
import categoriesResponse from '../../fixtures/productLookup/categoriesResponse.json'
import lowestPriceInquiryResponse from '../../fixtures/productLookup/lowestPriceInquiryResponse.json'
import lowestPriceInquiryResponse2 from '../../fixtures/productLookup/lowestPriceInquiryResponse2.json'
import lookupTokenResponse from '../../fixtures/productLookup/lookupTokenResponse.json'
import lowestPriceInquiryResponseMalformedPrice from '../../fixtures/productLookup/lowestPriceInquiryResponseMalformedPrice.json'
import lowestPriceInquiryResponseMalformedPrice2 from '../../fixtures/productLookup/lowestPriceInquiryResponseMalformedPrice2.json'
import emptyStyleVariantResponse from '../../fixtures/productLookup/emptyStyleVariantResponse.json'

context('Product Lookup tests', () => {
  beforeEach(() => {
    cy.launchPage()
  })

  const tags = new elements()
  const associateNum = Cypress.env().associateNum
  const associatePIN = Cypress.env().associatePIN

  it('Test 1: Panel initially contains input and close button', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    tags.productLookupSearchInput().should('be.visible')
    tags.productLookupCloseButton().should('be.visible')
    tags.productLookupPrintDetailsButton().should('not.exist')
    tags.productLookupPanel().should('contain.text', 'Scan an Item')
  })

  it('Test 2: Prevent doing a search if search is empty or only contains spaces', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    tags.productLookupSearchInput().click()
      .type('{enter}')
    tags.productLookupPanel().should('contain.text', 'Scan an Item')
    tags.productLookupSearchInput().click()
      .type(' {enter}')
    tags.productLookupPanel().should('contain.text', 'Scan an Item')
  })

  it('Test 3: Search displays results correctly', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    tags.productLookupPanel().should('contain.text', searchResultsResponse.result[0].name)
    tags.productLookupPanel().should('contain.text', 'Showing 1–10 of 100 results')
    // initial pagination
    tags.productLookupPaginationItem(1).should('be.visible').should('contain.text', '(1)')
    tags.productLookupPaginationItem(2).should('be.visible')
    tags.productLookupPaginationItem(3).should('be.visible')
    tags.productLookupPaginationItem(10).should('be.visible')
    // pagination on page 3
    tags.productLookupPaginationItem(3).click()
    tags.productLookupPaginationItem(1).should('be.visible')
    tags.productLookupPaginationItem(2).should('be.visible')
    tags.productLookupPaginationItem(3).should('be.visible').should('contain.text', '(3)')
    tags.productLookupPaginationItem(4).should('be.visible')
    tags.productLookupPaginationItem(10).should('be.visible')
    // pagination on page 5
    tags.productLookupPaginationItem(4).click()
    tags.productLookupPaginationItem(5).click()
    tags.productLookupPaginationItem(1).should('be.visible')
    tags.productLookupPaginationItem(4).should('be.visible')
    tags.productLookupPaginationItem(5).should('be.visible').should('contain.text', '(5)')
    tags.productLookupPaginationItem(6).should('be.visible')
    tags.productLookupPaginationItem(10).should('be.visible')
    // pagination on page 8
    tags.productLookupPaginationItem(6).click()
    tags.productLookupPaginationItem(7).click()
    tags.productLookupPaginationItem(8).click()
    tags.productLookupPaginationItem(1).should('be.visible')
    tags.productLookupPaginationItem(7).should('be.visible')
    tags.productLookupPaginationItem(8).should('be.visible').should('contain.text', '(8)')
    tags.productLookupPaginationItem(9).should('be.visible')
    tags.productLookupPaginationItem(10).should('be.visible')
    // pagination on page 10
    tags.productLookupPaginationItem(10).click()
    tags.productLookupPaginationItem(1).should('be.visible')
    tags.productLookupPaginationItem(8).should('be.visible')
    tags.productLookupPaginationItem(9).should('be.visible')
    tags.productLookupPaginationItem(10).should('be.visible').should('contain.text', '(10)')
  })

  it('Test 4: Item details display correctly', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    cy.intercept('**/ProductLookup/Details/**', { body: detailsResponse }).as('details')
    cy.intercept('**/Pricing/PriceBySku/**', { body: pricingResponse }).as('pricing')
    tags.productLookupPanel().contains(searchResultsResponse.result[0].name).click()
    cy.wait('@details')
    cy.wait('@pricing')
    tags.productLookupBackToSearch().should('be.visible')
    tags.productLookupPrintDetailsButton().should('be.visible')
    tags.productLookupPanel().should('contain.text', 'UPC: 091208580135')
    tags.productLookupPanel().should('contain.text', '$32.00')
    tags.productLookupPanel().should('contain.text', '48 Options')
    tags.productLookupPanel().should('contain.text', '1X - XXL')
    tags.productLookupTransactionButton().should('not.exist')
  })

  it('Test 5: Item details adjustment page functions correctly', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    cy.intercept('**/ProductLookup/Details/**', { body: detailsResponse }).as('details')
    cy.intercept('**/Pricing/PriceBySku/**', { body: pricingResponse }).as('pricing')
    tags.productLookupPanel().contains(searchResultsResponse.result[0].name).click()
    cy.wait('@details')
    tags.productLookupAttribute('color').click()
    tags.productLookupVariant('magic-ember').should('not.have.css', 'opacity', '0.5')
    tags.productLookupVariant('ashen-slate').should('have.css', 'opacity', '0.5')
    tags.productLookupVariant('ashen-slate').find('[data-testid="radio:radio-button-input"]').click()
    tags.productLookupSaveAttributesButton().should('have.attr', 'aria-disabled', 'true')
    tags.productLookupAttributeAdjust('size').click()
    tags.productLookupVariant('xxl').find('[data-testid="radio:radio-button-input"]').click()
    tags.productLookupSaveAttributesButton().should('not.have.attr', 'aria-disabled', 'true')
    tags.productLookupSaveAttributesButton().click()
    tags.productLookupAttribute('size').should('contain.text', 'XXL')
    tags.productLookupAttribute('color').find('img').should('have.attr', 'src', 'http://dks.scene7.com/is/image/dkscdn/20NIKWTMPCRXXXXXXAPB_Ashen_Slate_swatch?DSG_PDPSwatch$')
  })

  it('Test 6: Search displays results correctly authenticated', () => {
    cy.login(associateNum, associatePIN)
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    tags.productLookupPanel().should('contain.text', searchResultsResponse.result[0].name)
    tags.productLookupPanel().should('contain.text', 'Showing 1–10 of 100 results')
  })

  it('Test 7: Item details display correctly authenticated', () => {
    cy.login(associateNum, associatePIN)
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    cy.intercept('**/ProductLookup/Details/**', { body: detailsResponseInStock }).as('details')
    cy.intercept('**/Pricing/PriceBySku/**', { body: pricingResponse }).as('pricing')
    tags.productLookupPanel().contains(searchResultsResponse.result[0].name).click()
    cy.wait('@details')
    cy.wait('@pricing')
    tags.productLookupBackToSearch().should('be.visible')
    tags.productLookupPrintDetailsButton().should('be.visible')
    tags.productLookupPanel().should('contain.text', 'UPC: 091208580135')
    tags.productLookupPanel().should('contain.text', '$32.00')
    tags.productLookupPanel().should('contain.text', '48 Options')
    tags.productLookupPanel().should('contain.text', '1X - XXL')
    tags.productLookupTransactionButton().should('be.visible')
    tags.productLookupTransactionButton().should('contain.text', 'Start Transaction')
  })

  it('Test 8: Able to add an item to a transaction when the item is in stock', () => {
    cy.login(associateNum, associatePIN)
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    cy.intercept('**/ProductLookup/Details/**', { body: detailsResponseInStock }).as('details')
    cy.intercept('**/Pricing/PriceBySku/**', { body: pricingResponse }).as('pricing')
    tags.productLookupPanel().contains(searchResultsResponse.result[0].name).click()
    cy.wait('@details')
    cy.wait('@pricing')
    cy.intercept('**/OmniSearch', { body: omniSearchResponse }).as('omnisearch')
    tags.productLookupTransactionButton().should('be.visible')
    tags.productLookupTransactionButton().click()
    cy.wait('@omnisearch')
    tags.transactionCard().should('contain.text', omniSearchResponse.transaction.items[0].upc)
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    tags.productLookupPanel().contains(searchResultsResponse.result[0].name).click()
    tags.productLookupTransactionButton().should('contain.text', 'Add To Transaction')
  })

  it('Test 9: Unable to add an item to a transaction when an item is out of stock', () => {
    cy.login(associateNum, associatePIN)
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    cy.intercept('**/ProductLookup/Details/**', { body: detailsResponse }).as('details')
    cy.intercept('**/Pricing/PriceBySku/**', { body: pricingResponse }).as('pricing')
    tags.productLookupPanel().contains(searchResultsResponse.result[0].name).click()
    cy.wait('@details')
    cy.wait('@pricing')
    tags.productLookupTransactionButton().should('have.attr', 'aria-disabled', 'true')
    tags.productLookupTransactionButton().should('contain.text', 'Out of Stock')
  })

  it('Test 10: Handle search results error correctly', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/ProductLookup/Search/**', { statusCode: 418 }).as('searchResultsError')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResultsError')
    tags.productLookupRetryButton().should('be.visible')
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResultsSuccess')
    tags.productLookupRetryButton().click()
    cy.wait('@searchResultsSuccess')
    tags.productLookupPanel().should('contain.text', searchResultsResponse.result[0].name)
    tags.productLookupPanel().should('contain.text', 'Showing 1–10 of 100 results')
  })

  it('Test 11: Handle price and detail error correctly', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    cy.intercept('**/ProductLookup/Details/**', { statusCode: 418 }).as('detailsError')
    tags.productLookupPanel().contains(searchResultsResponse.result[0].name).click()
    cy.wait('@detailsError')
    tags.productLookupRetryButton().should('be.visible')
    cy.intercept('**/ProductLookup/Details/**', { body: detailsResponse }).as('detailsSuccess')
    cy.intercept('**/Pricing/PriceBySku/**', { statusCode: 418 }).as('pricingError')
    tags.productLookupRetryButton().click()
    cy.wait('@detailsSuccess')
    cy.wait('@pricingError')
    tags.productLookupPanel().should('contain.text', 'Failed to fetch pricing from the system')
  })

  it('Test 12: Prompt-for-price item details display correctly', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/ProductLookup/Details/**', { body: pfpDetailsResponse }).as('details')
    cy.intercept('**/Pricing/PriceBySku/**', { body: pfpPricingResponse }).as('pricing')
    tags.productLookupSearchInput().click()
      .type('018614010209{enter}')
    cy.wait('@details')
    cy.wait('@pricing')
    tags.productLookupPanel().should('contain.text', 'Prompt for Price')
  })
  
  it('Test 13: Show 0 search results correctly', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/ProductLookup/Search/**', { body: zeroResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('fhghkdfjkshghgjksdfhg{enter}')
    cy.wait('@searchResults')
    tags.productLookupPanel().should('contain.text', 'No search results found')
  })
  
  it('Test 14: Hide pagination index with only 1 page of search results', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/ProductLookup/Search/**', { body: oneResultPageResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('yeti tumbler 30oz{enter}')
    cy.wait('@searchResults')
    cy.get(`[data-testid="product-lookup-page-1"]`).should('not.exist')
  })
  
  it('Test 15: Scan goes directly to details and back button goes to landing with no search', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/ProductLookup/Details/**', { body: detailsResponse }).as('details')
    cy.intercept('**/Pricing/PriceBySku/**', { body: pricingResponse }).as('pricing')
    cy.window().then((w) => {
      w.scanEvent("091208580135")
    })
    cy.wait('@details')
    cy.wait('@pricing')
    tags.productLookupBackToSearch().should('be.visible').should('not.contain.text', 'Back to Search')
    tags.productLookupPrintDetailsButton().should('be.visible')
    tags.productLookupPanel().should('contain.text', 'UPC: 091208580135')
    tags.productLookupPanel().should('contain.text', '$32.00')
    tags.productLookupPanel().should('contain.text', '48 Options')
    tags.productLookupPanel().should('contain.text', '1X - XXL')
    tags.productLookupTransactionButton().should('not.exist')
    tags.productLookupBackToSearch().click()
    tags.productLookupPanel().should('contain.text', 'Scan an Item')
  })
  
  it('Test 16: Typed UPC goes directly to details and back button goes to landing with no search', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/ProductLookup/Details/**', { body: detailsResponse }).as('details')
    cy.intercept('**/Pricing/PriceBySku/**', { body: pricingResponse }).as('pricing')
    tags.productLookupSearchInput().click()
      .type('091208580135{enter}')
    cy.wait('@details')
    cy.wait('@pricing')
    tags.productLookupBackToSearch().should('be.visible').should('not.contain.text', 'Back to Search')
    tags.productLookupPrintDetailsButton().should('be.visible')
    tags.productLookupPanel().should('contain.text', 'UPC: 091208580135')
    tags.productLookupPanel().should('contain.text', '$32.00')
    tags.productLookupPanel().should('contain.text', '48 Options')
    tags.productLookupPanel().should('contain.text', '1X - XXL')
    tags.productLookupTransactionButton().should('not.exist')
    tags.productLookupBackToSearch().click()
    tags.productLookupPanel().should('contain.text', 'Scan an Item')
  })
  
  it('Test 17: Invalid typed UPC errors correctly', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/ProductLookup/Details/**', { body: details404, statusCode: 404 }).as('detailsError')
    tags.productLookupSearchInput().click()
      .type('121212121212{enter}')
    cy.wait('@detailsError')
    tags.productLookupBackToSearch().should('be.visible').should('not.contain.text', 'Back to Search')
    tags.productLookupRetryButton().should('be.visible')
    tags.productLookupPanel().should('contain.text', 'UPC not found.')
  })

  it('Test 18: Transaction button disabled when tender panel showing', () => {
    cy.login(associateNum, associatePIN)
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    cy.intercept('**/ProductLookup/Details/**', { body: detailsResponseInStock }).as('details')
    cy.intercept('**/Pricing/PriceBySku/**', { body: pricingResponse }).as('pricing')
    tags.productLookupPanel().contains(searchResultsResponse.result[0].name).click()
    cy.wait('@details')
    cy.wait('@pricing')
    cy.intercept('**/OmniSearch', { body: omniSearchResponse }).as('omnisearch')
    tags.productLookupTransactionButton().click()
    cy.wait('@omnisearch')
    cy.pressComplete()
    tags.sportsMatterCampaignNoThanksButton().click()
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    tags.productLookupPanel().contains(searchResultsResponse.result[0].name).click()
    tags.productLookupTransactionButton().should('have.attr', 'aria-disabled', 'true')
  })

  it('Test 19: State should clear when clicking away from panel', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    tags.closeFooterOverlay().click()
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    tags.productLookupPanel().should('contain.text', 'Scan an Item')
  })

  it('Test 20: State should clear when clicking the close button', () => {
    tags.productLookupFooterButton().should('be.visible')
     .click({force: true})
    tags.productLookupOverlayButton().click()
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    tags.productLookupSearchInput().should('not.have.attr', 'readonly')
    tags.productLookupCloseButton().click().should('not.exist')
    tags.login().should('be.visible')
    tags.pin().should('be.visible')
    cy.get('body').should('contain.text', 'REGISTER IS CLOSED')
    tags.productLookupFooterButton().should('be.visible')
     .click({force: true})
    tags.lowestPriceInquiryOverlayButton().should('be.visible') 
    tags.productLookupOverlayButton().should('be.visible')
      .click()
    tags.productLookupPanel().should('contain.text', 'Scan an Item')
  })

  it('Test 21: State should clear when clicking the lookup button', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    tags.productLookupFooterButton().click()
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    tags.productLookupPanel().should('contain.text', 'Scan an Item')
  })

  it('Test 22: State should clear when adding to a transaction', () => {
    cy.login(associateNum, associatePIN)
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    cy.intercept('**/ProductLookup/Details/**', { body: detailsResponseInStock }).as('details')
    cy.intercept('**/Pricing/PriceBySku/**', { body: pricingResponse }).as('pricing')
    tags.productLookupPanel().contains(searchResultsResponse.result[0].name).click()
    cy.wait('@details')
    cy.wait('@pricing')
    cy.intercept('**/OmniSearch', { body: omniSearchResponse }).as('omnisearch')
    tags.productLookupTransactionButton().click()
    cy.wait('@omnisearch')
    tags.omniScan().should('be.visible')
    tags.descriptionItem1().should('be.visible')
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    tags.productLookupPanel().should('contain.text', 'Scan an Item')
  })

  it('Test 23: Search should persist, then results should clear when clear button is clicked', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/ProductLookup/Search/**', { body: searchResultsResponse }).as('searchResults')
    tags.productLookupSearchInput().click()
      .type('nike shorts{enter}')
    cy.wait('@searchResults')
    cy.intercept('**/ProductLookup/Details/**', { body: detailsResponse }).as('details')
    cy.intercept('**/Pricing/PriceBySku/**', { body: pricingResponse }).as('pricing')
    tags.productLookupPanel().contains(searchResultsResponse.result[0].name).click()
    cy.wait('@details')
    cy.wait('@pricing')
    tags.productLookupBackToSearch().click()
    tags.productLookupSearchInput().should('have.value', 'nike shorts')
    tags.productLookupClearButton().click()
    tags.productLookupPanel().should('contain.text', 'Scan an Item')
  })
  
  it('Test 24: Edge case UPC scan with empty styleVariants errors correctly', () => {
    tags.productLookupFooterButton().click()
    tags.productLookupOverlayButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/ProductLookup/Details/**', { body: emptyStyleVariantResponse }).as('emptyStyleVariantDetails')
    cy.window().then((w) => {
      w.scanEvent("SEC")
    })
    cy.wait('@emptyStyleVariantDetails')
    tags.productLookupBackToSearch().should('be.visible').should('not.contain.text', 'Back to Search')
    tags.productLookupRetryButton().should('be.visible')
    tags.productLookupPanel().should('contain.text', 'Failed to fetch product details from the system.')
  })
})

context('Store Services tests', () => {
  beforeEach(() => {
    cy.launchPageLoggedIn()
  })

  const tags = new elements()

  it('Test 1: Panel loads categories correctly', () => {
    tags.productLookupFooterButton().click()
    cy.intercept('**/ProductLookup/Categories/**', { body: categoriesResponse }).as('categories')
    tags.storeServicesOverlayButton().click()
    cy.wait('@categories')
    tags.storeServicesCategory(0).click()
    tags.storeServicesPanel().should('contain.text', 'NM DUCK STAMP LICENSE')
    tags.storeServicesPanel().should('contain.text', '400000154206')
  })

  it('Test 2: Add button disabled when tender panel showing', () => {
    tags.productLookupFooterButton().click()
    cy.intercept('**/ProductLookup/Categories/**', { body: categoriesResponse }).as('categories')
    tags.storeServicesOverlayButton().click()
    cy.wait('@categories')
    tags.storeServicesCategory(0).click()
    cy.intercept('**/OmniSearch', { body: serviceOmniSearchResponse }).as('omnisearch')
    tags.storeServicesAddButton(0).click()
    cy.wait('@omnisearch')
    cy.pressComplete()
    tags.sportsMatterCampaignNoThanksButton().click()
    tags.productLookupFooterButton().click()
    tags.storeServicesOverlayButton().click()
    cy.wait('@categories')
    tags.storeServicesCategory(0).click()
    tags.storeServicesAddButton(0).should('have.attr', 'aria-disabled', 'true')
  })
})

context('Lowest Price Inquiry tests', () => {
  beforeEach(() => {
    cy.launchPage()
  })

  const tags = new elements()
  const yetiTumblerUPC = '888830021811'
  const runningShoesUPC = '190340371394'
  const yetiRamblerUPC = '888830113080'
  const northFaceJacketUPC = '772259248846'
  const associateNum = Cypress.env().associateNum
  const associatePIN = Cypress.env().associatePIN

  it('Test 1: Searching for one item unauthenticated works correctly logged out', () => {
    tags.productLookupFooterButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/Returns/NonReceiptedProduct/**', { body: lowestPriceInquiryResponse }).as('lowestPrice')
    tags.lowestPriceInquiryOverlayButton().click()
    tags.lowestPriceInquiryNextButton().should('have.attr', 'aria-disabled', 'true')
    tags.lowestPriceInquiryInput().type(yetiTumblerUPC)
    tags.lowestPriceInquiryNextButton().should('not.have.attr', 'aria-disabled', 'true')
    tags.lowestPriceInquiryInput().type('{enter}')
    tags.lowestPriceInquiryInput().should('be.empty')
    cy.wait('@lowestPrice')
    tags.lowestPriceInquiryPanel().should('contain.text', '26.65')
    tags.lowestPriceInquiryPanel().should('contain.text', 'YETI 20 oz. Rambler Tumbler with MagSlider Lid')
    tags.lowestPriceInquiryPanel().should('contain.text', '888830021811')
    tags.lowestPriceInquiryPanel().should('contain.text', 'Without a receipt, refunds will be based on the lowest selling price of the item.')
  })

  it('Test 2: Searching for an item that is not found displays correct message logged out', () => {
    tags.productLookupFooterButton().click()
    cy.intercept('**/LookupSecurity/Authenticate/**', { body: lookupTokenResponse }).as('lookupToken')
    cy.intercept('**/Returns/NonReceiptedProduct/**', { statusCode: 404 }).as('lowestPriceFailure')
    tags.lowestPriceInquiryOverlayButton().click()
    tags.lowestPriceInquiryNextButton().should('have.attr', 'aria-disabled', 'true')
    tags.lowestPriceInquiryInput().type(yetiTumblerUPC)
    tags.lowestPriceInquiryNextButton().should('not.have.attr', 'aria-disabled', 'true')
    tags.lowestPriceInquiryInput().type('{enter}')
    tags.lowestPriceInquiryInput().should('be.empty')
    cy.wait('@lowestPriceFailure')
    tags.lowestPriceInquiryPanel().should('contain.text', 'Sorry, we could not find the lowest price for this product because it has not been sold recently.')
  })

  it('Test 3: Searching for one item unauthenticated works correctly logged in', () => {
    cy.login(associateNum, associatePIN)
    tags.productLookupFooterButton().click()
    cy.intercept('**/Returns/NonReceiptedProduct/**', { body: lowestPriceInquiryResponse }).as('lowestPrice')
    tags.lowestPriceInquiryOverlayButton().click()
    tags.lowestPriceInquiryNextButton().should('have.attr', 'aria-disabled', 'true')
    tags.lowestPriceInquiryInput().type(yetiTumblerUPC)
    tags.lowestPriceInquiryNextButton().should('not.have.attr', 'aria-disabled', 'true')
    tags.lowestPriceInquiryInput().type('{enter}')
    tags.lowestPriceInquiryInput().should('be.empty')
    cy.wait('@lowestPrice')
    tags.lowestPriceInquiryPanel().should('contain.text', '26.65')
    tags.lowestPriceInquiryPanel().should('contain.text', 'YETI 20 oz. Rambler Tumbler with MagSlider Lid')
    tags.lowestPriceInquiryPanel().should('contain.text', '888830021811')
    tags.lowestPriceInquiryPanel().should('contain.text', 'Without a receipt, refunds will be based on the lowest selling price of the item.')
  })

  it('Test 4: Searching for an item that is not found displays correct message logged in', () => {
    cy.login(associateNum, associatePIN)
    tags.productLookupFooterButton().click()
    cy.intercept('**/Returns/NonReceiptedProduct/**', { statusCode: 404 }).as('lowestPriceFailure')
    tags.lowestPriceInquiryOverlayButton().click()
    tags.lowestPriceInquiryNextButton().should('have.attr', 'aria-disabled', 'true')
    tags.lowestPriceInquiryInput().type(yetiTumblerUPC)
    tags.lowestPriceInquiryNextButton().should('not.have.attr', 'aria-disabled', 'true')
    tags.lowestPriceInquiryInput().type('{enter}')
    tags.lowestPriceInquiryInput().should('be.empty')
    cy.wait('@lowestPriceFailure')
    tags.lowestPriceInquiryPanel().should('contain.text', 'Sorry, we could not find the lowest price for this product because it has not been sold recently.')
  })

  it('Test 5: Searching for two items in a row works correctly', () => {
    cy.login(associateNum, associatePIN)
    tags.productLookupFooterButton().click()
    // first item
    cy.intercept('**/Returns/NonReceiptedProduct/**', { body: lowestPriceInquiryResponse }).as('lowestPrice')
    tags.lowestPriceInquiryOverlayButton().click()
    tags.lowestPriceInquiryNextButton().should('have.attr', 'aria-disabled', 'true')
    tags.lowestPriceInquiryInput().type(yetiTumblerUPC)
    tags.lowestPriceInquiryNextButton().should('not.have.attr', 'aria-disabled', 'true')
    tags.lowestPriceInquiryInput().type('{enter}')
    tags.lowestPriceInquiryInput().should('be.empty')
    cy.wait('@lowestPrice')
    tags.lowestPriceInquiryPanel().should('contain.text', '26.65')
    tags.lowestPriceInquiryPanel().should('contain.text', 'YETI 20 oz. Rambler Tumbler with MagSlider Lid')
    tags.lowestPriceInquiryPanel().should('contain.text', '888830021811')
    tags.lowestPriceInquiryPanel().should('contain.text', 'Without a receipt, refunds will be based on the lowest selling price of the item.')
    // second item
    cy.intercept('**/Returns/NonReceiptedProduct/**', { body: lowestPriceInquiryResponse2 }).as('lowestPrice2')
    tags.lowestPriceInquiryNextButton().should('have.attr', 'aria-disabled', 'true')
    tags.lowestPriceInquiryInput().click()
    tags.lowestPriceInquiryInput().type(runningShoesUPC)
    tags.lowestPriceInquiryNextButton().should('not.have.attr', 'aria-disabled', 'true')
    tags.lowestPriceInquiryInput().type('{enter}')
    tags.lowestPriceInquiryInput().should('be.empty')
    cy.wait('@lowestPrice2')
    tags.lowestPriceInquiryPanel().should('contain.text', '90.27')
    tags.lowestPriceInquiryPanel().should('contain.text', 'Brooks Women’s Addiction 13 Running Shoes')
    tags.lowestPriceInquiryPanel().should('contain.text', '190340371394')
    tags.lowestPriceInquiryPanel().should('contain.text', 'Without a receipt, refunds will be based on the lowest selling price of the item.')
  })

  it('Test 6: Scanning an item searches brings up the lowest price for that item', () => {
    cy.login(associateNum, associatePIN)
    tags.productLookupFooterButton().click()
    cy.intercept('**/Returns/NonReceiptedProduct/**', { body: lowestPriceInquiryResponse }).as('lowestPrice')
    tags.lowestPriceInquiryOverlayButton().click()
    tags.lowestPriceInquiryNextButton().should('have.attr', 'aria-disabled', 'true')
    cy.window().then((w) => {
      w.scanEvent(yetiTumblerUPC)
    })
    cy.wait('@lowestPrice')
    tags.lowestPriceInquiryNextButton().should('have.attr', 'aria-disabled', 'true')
    tags.lowestPriceInquiryInput().should('be.empty', 'true')
    tags.lowestPriceInquiryPanel().should('contain.text', '26.65')
    tags.lowestPriceInquiryPanel().should('contain.text', 'YETI 20 oz. Rambler Tumbler with MagSlider Lid')
    tags.lowestPriceInquiryPanel().should('contain.text', '888830021811')
    tags.lowestPriceInquiryPanel().should('contain.text', 'Without a receipt, refunds will be based on the lowest selling price of the item.')
  })

  it('Test 7: Scanning an item logged out searches brings up the lowest price for that item', () => {
    tags.productLookupFooterButton().click()
    cy.intercept('**/Returns/NonReceiptedProduct/**', { body: lowestPriceInquiryResponse }).as('lowestPrice')
    tags.lowestPriceInquiryOverlayButton().click()
    tags.lowestPriceInquiryNextButton().should('have.attr', 'aria-disabled', 'true')
    cy.window().then((w) => {
      w.scanEvent(yetiTumblerUPC)
    })
    cy.wait('@lowestPrice')
    tags.lowestPriceInquiryNextButton().should('have.attr', 'aria-disabled', 'true')
    tags.lowestPriceInquiryInput().should('be.empty', 'true')
    tags.lowestPriceInquiryPanel().should('contain.text', '26.65')
    tags.lowestPriceInquiryPanel().should('contain.text', 'YETI 20 oz. Rambler Tumbler with MagSlider Lid')
    tags.lowestPriceInquiryPanel().should('contain.text', '888830021811')
    tags.lowestPriceInquiryPanel().should('contain.text', 'Without a receipt, refunds will be based on the lowest selling price of the item.')
  })

  it('Test 8 lowest price is formatted with two decimal places', () => {
    cy.login(associateNum, associatePIN)
    tags.productLookupFooterButton().click()
    // first item
    cy.intercept('**/Returns/NonReceiptedProduct/**', { body: lowestPriceInquiryResponseMalformedPrice }).as('lowestPrice')
    tags.lowestPriceInquiryOverlayButton().click()
    tags.lowestPriceInquiryInput().type(yetiRamblerUPC)
    tags.lowestPriceInquiryInput().type('{enter}')
    cy.wait('@lowestPrice')
    tags.lowestPriceInquiryPanel().should('contain.text', '10.00')
    // second item
    cy.intercept('**/Returns/NonReceiptedProduct/**', { body: lowestPriceInquiryResponseMalformedPrice2 }).as('lowestPrice2')
    tags.lowestPriceInquiryInput().click()
    tags.lowestPriceInquiryInput().type(northFaceJacketUPC)
    tags.lowestPriceInquiryInput().type('{enter}')
    cy.wait('@lowestPrice2')
    tags.lowestPriceInquiryPanel().should('contain.text', '69.90')
  })
})
